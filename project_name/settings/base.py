# -*- coding: utf-8 -*-

"""
Django settings for {{ project_name }} project.

Generated by 'django-admin startproject' using Django {{ django_version }}.

For more information on this file, see
https://docs.djangoproject.com/en/{{ docs_version }}/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/{{ docs_version }}/ref/settings/
"""

import os
import socket
import sys

# branch mappings
BRANCH_ENVIRONMENTS = {
    'master': 'production',
    'develop': 'staging',
}
DEPLOY_ENVIRONMENTS = tuple(BRANCH_ENVIRONMENTS.values())
DEPLOY_ENVIRONMENT = os.environ.get('DEPLOY_ENVIRONMENT')
DEPLOY_BRANCH = os.environ.get('CIRCLE_BRANCH')
if DEPLOY_BRANCH in BRANCH_ENVIRONMENTS:
    branch_env = BRANCH_ENVIRONMENTS[DEPLOY_BRANCH]
    assert os.environ.setdefault('DEPLOY_ENVIRONMENT', branch_env) == branch_env
    DEPLOY_ENVIRONMENT = os.environ['DEPLOY_ENVIRONMENT']

# deploy environment
ENVIRONMENT = os.environ['ENVIRONMENT']
if ENVIRONMENT == 'deploy':
    ENVIRONMENT = DEPLOY_ENVIRONMENT
assert ENVIRONMENT in DEPLOY_ENVIRONMENTS + ('local', 'ci')

DEPLOY_SYNC_DB = bool(os.environ.setdefault('DEPLOY_SYNC_DB', str(True)) == 'True')

# Global Site Parameters
SITE_ID = os.environ.get('SITE_ID', 1)
SITE_FQDN = os.environ.get('SITE_FQDN', socket.getfqdn())
SITE_NAME = '{{ project_name|title }}'

DEFAULT_FROM_EMAIL = 'noreply@{}'.format(SITE_FQDN)
SERVER_EMAIL = DEFAULT_FROM_EMAIL

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
PROJECT_ROOT = os.path.dirname(BASE_DIR)

ADMINS = (
    # ('Your Name', 'your_email@example.com'),
    ('{} Admin'.format(SITE_NAME), 'admin@{}'.format(SITE_FQDN)),
)

# Application definition

PROJECT_APPS = [
]

INSTALLED_APPS = PROJECT_APPS + [
    '{{ project_name }}',
    'foundation',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.admin',
    'django.contrib.humanize',
    'django.contrib.sites',
    'django.contrib.sitemaps',
    'sekizai',
]

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'foundation.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = '{{ project_name }}.urls'

TEMPLATES = [
    {
        'BACKEND': 'foundation.template.backends.django.DjangoTemplates',
        'OPTIONS': {
            'context_processors': [
                'django.contrib.auth.context_processors.auth',
                'django.template.context_processors.debug',
                'django.template.context_processors.i18n',
                'django.template.context_processors.tz',
                'django.template.context_processors.request',
                'django.contrib.messages.context_processors.messages',
                'dealer.contrib.django.context_processor',  # static cache versioning
                'sekizai.context_processors.sekizai',
            ],
            'loaders': [
                'foundation.template.loaders.app_directories.Loader'
            ],
        },
    },
]

WSGI_APPLICATION = '{{ project_name }}.wsgi.application'


# Database
# https://docs.djangoproject.com/en/{{ docs_version }}/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': '{{ project_name }}',
        'USER': 'postgres',
        'PASSWORD': 'password',
        'HOST': '127.0.0.1',
        'PORT': '5432',
    } if ENVIRONMENT != 'ci' else {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(PROJECT_ROOT, 'db.sqlite3'),
    }
}

DB_DUMP_FORMAT_STRING = '{}.dump.sql'

# Absolute filesystem path to the directory that will hold user-uploaded files.
# Example: "/home/media/media.lawrence.com/media/"
MEDIA_ROOT = os.path.join(PROJECT_ROOT, 'public', 'media')

# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash.
# Examples: "http://media.lawrence.com/media/", "http://example.com/media/"
MEDIA_URL = '/media/'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'formatters': {
        'basic': {
            'format': '%(asctime)s %(name)-20s %(levelname)-8s %(message)s',
        },
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'basic',
        },
    },
    'loggers': {
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
        'django.security': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
    },
    'root': {
        'handlers': ['console', ],
        'level': 'INFO',
    },
}

# Internationalization
# https://docs.djangoproject.com/en/{{ docs_version }}/topics/i18n/

# Language code for this installation. All choices can be found here:
# http://www.i18nguy.com/unicode/language-identifiers.html
LANGUAGE_CODE = 'en-us'
LOCALE_PATHS = (os.path.join(PROJECT_ROOT, 'locale'), )

# Local time zone for this installation. Choices can be found here:
# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
# although not all choices may be available on all operating systems.
# On Unix systems, a value of None will cause Django to use the same
# timezone as the operating system.
# If running in a Windows environment this must be set to the same as your
# system time zone.
TIME_ZONE = 'America/New_York'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/{{ docs_version }}/howto/static-files/
STATICFILES_LOCATION = 'static'
USE_AWS = any([
    bool(os.environ.setdefault('USE_AWS', str(False)) == 'True'),
    ENVIRONMENT not in ('local', 'ci'),
    'sync' in sys.argv
])
if USE_AWS:
    AWS_STORAGE_BUCKET_FORMAT = '{{ project_name }}-{environment}'
    APP_NAME = AWS_STORAGE_BUCKET_NAME = (
        AWS_STORAGE_BUCKET_FORMAT.format(environment=ENVIRONMENT)
        if ENVIRONMENT != 'ci'
        else None
    )
    AWS_ACCESS_KEY_ID = os.environ['AWS_ACCESS_KEY_ID']
    AWS_SECRET_ACCESS_KEY = os.environ['AWS_SECRET_KEY']
    os.environ['AWS_SECRET_ACCESS_KEY'] = AWS_SECRET_ACCESS_KEY
    AWS_S3_CUSTOM_DOMAIN = '{}.s3.amazonaws.com'.format(AWS_STORAGE_BUCKET_NAME)
    STATICFILES_STORAGE = '{{ project_name }}.storage.S3BotoManifestStaticFilesStorage'
    STATIC_URL = "https://{}/{}/".format(AWS_S3_CUSTOM_DOMAIN, STATICFILES_LOCATION)
else:
    # Absolute path to the directory static files should be collected to.
    # Don't put anything in this directory yourself; store your static files
    # in apps' "static/" subdirectories and in STATICFILES_DIRS.
    # Example: "/home/media/media.lawrence.com/static/"
    STATIC_ROOT = os.path.join(PROJECT_ROOT, STATICFILES_LOCATION)
    # URL prefix for static files.
    # Example: "http://media.lawrence.com/static/"
    # non-s3 hosted path on same server (or by proxy)
    STATIC_URL = '/static/'

# If using Celery, tell it to obey our logging configuration.
CELERYD_HIJACK_ROOT_LOGGER = False

# https://docs.djangoproject.com/en/1.9/topics/auth/passwords/#password-validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Custom Auth Backend
# https://docs.djangoproject.com/en/1.10/ref/settings/#authentication-backends
AUTHENTICATION_BACKENDS = ['foundation.auth.backends.ModelBackend']

# AUTH_USER_MODEL = '{{ project_name }}.User'
# LOGIN_URL = '/login/'
# LOGIN_REDIRECT_URL = '/'
# LOGOUT_REDIRECT_URL = '/'

# Make things more secure by default. Run "python manage.py check --deploy"
# for even more suggestions that you might want to add to the settings, depending
# on how the site uses SSL.
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_BROWSER_XSS_FILTER = True
CSRF_COOKIE_HTTPONLY = True
X_FRAME_OPTIONS = 'DENY'

COPYRIGHT_STATEMENT = "Copyright Â© {year} {{ project_name | title }}"
